% ##### FIND SIX MAXIMAL ELECTRODES AT EACH PEAK #####

% This script finds the six electrodes with maximal amplitude (positive or negative
% depending on the peak) for each peak in the EEG data averaged across
% individuals. The values for the electrodes at each peak are then averaged 
% for each individual and a vector is written to a .csv file for input in
% to JASP.
% Inputs are the grand average structure of the EEG data generated by 
% FieldTrip

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

% Experimental variables
con = {'C1';'C2'}; % two experimental sessions seperated by at least a week
site = {'pfc';'ppc'}; % two different stimulation sites
tr = {'T0';'T1'}; % two different time points within a day - t0 = baseline, t1 = following drug/placebo

% Filtering
filtType = ''; %'' for 1-100 Hz

% X limits to plot (ms)
plotXLim = [0,250];
plotYLim = [-2,2];
ampScale = [-1,1];

% Data set to use
dataSet = 'CLEAN_SOUND'; % 'CLEAN_ICA' | 'CLEAN_SOUND'
dataAv = 'N14';

pathIn = ['I:\nmda_tms_eeg\',dataSet,'\'];

% Load peak latencies
load([pathIn,'peak_latency_ranges.mat']);

% Load GrandAverage file
load([pathIn,'grandAverage',filtType,'_',dataAv,'.mat']);

% Time vector (ms)
time = grandAverage.C1.pfc.T0.time*1000;
[~,t1] = min(abs(time - -2));
[~,t2] = min(abs(time - 10));

% Plot butterfly plots for each condition and overlaid GMFA
for sidx = 1:size(site,1)
    figure;
    
    sub1 = subplot(1,7,1);
    tempData = [];
    tempData(:,:,:,1) = mean(grandAverage.C1.(site{sidx}).T0.individual,1);
    tempData(:,:,:,2) = mean(grandAverage.C2.(site{sidx}).T0.individual,1);
    
    dataIn = squeeze(mean(tempData,4));
    dataIn(:,t1:t2) = 0;
    
    for latx = 1:length(latencies.(site{sidx}))
        [~,tp] = min(abs(time - latencies.(site{sidx})(latx)));
        if latx == 1 || latx == 3 || latx == 6
            [B,I] = sort(dataIn(:,tp),1,'descend');
        else[B,I] = sort(dataIn(:,tp),1,'ascend');
        end
        peakChan.(site{sidx}){latx} = {grandAverage.C1.pfc.T0.label{I}};
        peakChanI.(site{sidx}){latx} = I;
    end
       
    plot(time,squeeze(dataIn),'k'); hold on;
    title([site{sidx},' T0']);
    xlabel('Time (ms)');
    ylabel('Amplitude (\muV)');
    Lim1 = sub1.YLim;
    
    for latx = 1:length(latencies.(site{sidx}))
        plot([latencies.(site{sidx})(latx),latencies.(site{sidx})(latx)],[-100,100],'r--');
    end
    
    yMax = max(abs(Lim1));
    set(sub1,'xlim',plotXLim,'ylim',plotYLim,'box','off');
    
    
    for latx = 1:6
        sub2 = subplot(1,7,latx+1);
        
        dataInFt = grandAverage.C1.pfc.T0;
        dataInFt.individual = mean(tempData,4);
        
        cfg = [];
        cfg.zlim = ampScale;
        cfg.xlim = [latencies.(site{sidx})(1,latx)/1000,latencies.(site{sidx})(1,latx)/1000];
        cfg.layout = 'easycapM11.mat';
        cfg.comment = 'no';
        cfg.interactive = 'no';
        cfg.parameter = 'individual';
        cfg.colormap = parula;
        
        cfg.highlight = 'on';
        cfg.highlightchannel   =  {peakChan.(site{sidx}){latx}{1:6}};
        cfg.highlightsymbol    = '*';
        cfg.highlightcolor     = [0,0,0];
        
        ft_topoplotER(cfg,dataInFt);
        sub2.Position(1,2) = sub2.Position(1,2)*0.95;
        sub2.Position(1,3) = sub2.Position(1,3)*1.2;
        sub2.Position(1,4) = sub2.Position(1,4)*1.2;
    end
       
end

% Plot ROI time series
peaks = {'peak1';'peak2';'peak3';'peak4';'peak5';'peak6'};

% Extract ROIs
for sidx = 1:size(site,1)
    for conx = 1:size(con,1)
        for trx = 1:size(tr,1)
            for peakx = 1:length(peaks)
                ROI.(peaks{peakx}).(con{conx}).(site{sidx}).(tr{trx}) = squeeze(mean(grandAverage.(con{conx}).(site{sidx}).(tr{trx}).individual(:,peakChanI.(site{sidx}){peakx}(1:6),:),2));
            end
        end
    end
end


for sitex = 1:length(site)
    for peakx = 1:length(peaks)
        for conx = 1:length(con)
            data1 = ROI.(peaks{peakx}).(con{conx}).(site{sitex}).T0;
            data2 = ROI.(peaks{peakx}).(con{conx}).(site{sitex}).T1;
            
            [~,tp] = min(abs(time - latencies.(site{sitex})(peakx)));
            dataPeak.(con{conx}).(site{sitex}).(peaks{peakx})(:,1) = mean(data1(:,tp-5:tp+5),2);
            dataPeak.(con{conx}).(site{sitex}).(peaks{peakx})(:,2) = mean(data2(:,tp-5:tp+5),2);
            dataPeakDiff.(site{sitex}).(peaks{peakx})(:,conx) = dataPeak.(con{conx}).(site{sitex}).(peaks{peakx})(:,2) - dataPeak.(con{conx}).(site{sitex}).(peaks{peakx})(:,1);
        end
        
%         figure;
%         
%         subplot(2,2,1)
%         
%  
%         
%         if peakx == 1
%             data1 = peakPos.C1.(site{sitex}).T0;
%             data2 = peakPos.C1.(site{sitex}).T1;
%         elseif peakx == 2
%             data1 = peakNeg.C1.(site{sitex}).T0;
%             data2 = peakNeg.C1.(site{sitex}).T1;
%         end
%         
%         data1(:,t1:t2) = 0;
%         data2(:,t1:t2) = 0;
%         
%         
%         meanData1 = mean(data1,1);
%         ciData1 = (std(data1,[],1)./sqrt(size(data1,1)))*1.96;
%         meanData2 = mean(data2,1);
%         ciData2 = (std(data2,[],1)./sqrt(size(data2,1)))*1.96;
%         
%         plot(time,meanData1,'b'); hold on;
%         f = fill([time,fliplr(time)],[meanData1-ciData1,fliplr(meanData1+ciData1)],'b');
%         set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
%         plot(time,meanData2,'r');
%         f = fill([time,fliplr(time)],[meanData2-ciData2,fliplr(meanData2+ciData2)],'r');
%         set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
%         
%         plot([latencies.(site{sitex})(peakx)-5,latencies.(site{sitex})(peakx)-5],[-100,100],'k--');
%         plot([latencies.(site{sitex})(peakx)+5,latencies.(site{sitex})(peakx)+5],[-100,100],'k--');
%         
%         set(gca,'xlim',[0,60],'ylim',[-2,2]);
%         
%         subplot(2,2,2)
%         if peakx == 1
%             data1 = peakPos.C2.(site{sitex}).T0;
%             data2 = peakPos.C2.(site{sitex}).T1;
%         elseif peakx == 2
%             data1 = peakNeg.C2.(site{sitex}).T0;
%             data2 = peakNeg.C2.(site{sitex}).T1;
%         end
%         
%         data1(:,t1:t2) = 0;
%         data2(:,t1:t2) = 0;
%         
%         [~,tp] = min(abs(time - latencies.(site{sitex})(peakx)));
%         dataPeak.C2.(site{sitex}).(peaks{peakx})(:,1) = mean(data1(:,tp-5:tp+1),2);
%         dataPeak.C2.(site{sitex}).(peaks{peakx})(:,2) = mean(data2(:,tp-5:tp+1),2);
%         dataPeakDiff.(site{sitex}).(peaks{peakx})(:,2) = dataPeak.C2.(site{sitex}).(peaks{peakx})(:,2) - dataPeak.C2.(site{sitex}).(peaks{peakx})(:,1);
%         
%         meanData1 = mean(data1,1);
%         ciData1 = (std(data1,[],1)./sqrt(size(data1,1)))*1.96;
%         meanData2 = mean(data2,1);
%         ciData2 = (std(data2,[],1)./sqrt(size(data2,1)))*1.96;
%         
%         plot(time,meanData1,'b'); hold on;
%         f = fill([time,fliplr(time)],[meanData1-ciData1,fliplr(meanData1+ciData1)],'b');
%         set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
%         plot(time,meanData2,'r');
%         f = fill([time,fliplr(time)],[meanData2-ciData2,fliplr(meanData2+ciData2)],'r');
%         set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
%         
%         plot([latencies.(site{sitex})(peakx)-5,latencies.(site{sitex})(peakx)-5],[-100,100],'k--');
%         plot([latencies.(site{sitex})(peakx)+5,latencies.(site{sitex})(peakx)+5],[-100,100],'k--');
%         
%         set(gca,'xlim',[0,60],'ylim',[-2,2]);
%         
%         subplot(2,2,3)
%         
%         dataCell = {dataPeak.C1.(site{sitex}).(peaks{peakx})(:,1),dataPeak.C1.(site{sitex}).(peaks{peakx})(:,2)};
%         BF_JitteredParallelScatter(dataCell,1,1,0);
%         
%         subplot(2,2,4)
%         
%         dataCell = {dataPeak.C2.(site{sitex}).(peaks{peakx})(:,1),dataPeak.C2.(site{sitex}).(peaks{peakx})(:,2)};
%         BF_JitteredParallelScatter(dataCell,1,1,0);
        
    end
end

% for sitex = 1:length(site)
%     
%     figure;
%     
%     for peakx = 1:length(peaks)
%         
%         subplot(1,2,peakx)
% 
%         dataCell = {dataPeakDiff.(site{sitex}).(peaks{peakx})(:,1),dataPeakDiff.(site{sitex}).(peaks{peakx})(:,2)};
%         BF_JitteredParallelScatter(dataCell,1,1,0);
%         
%     end
% end

%%
% Write data output files for within condition tests
pathOut = [pathIn,'STATS_JASP\'];

for conx = 1:length(con)
    for sitex = 1:length(site)
        for peakx = 1:length(peaks)

            header = {'Subject','T0','T1'};
            data(:,1) = 1:size(dataPeak.(con{conx}).(site{sitex}).(peaks{peakx}),1);
            data(:,2:3) = dataPeak.(con{conx}).(site{sitex}).(peaks{peakx});
            filename = [pathOut,(con{conx}),'_',(site{sitex}),'_',(peaks{peakx}),'.csv'];

            csvwriteh( filename, data, header );
            
        end
    end
end

% Write data output files for between condition tests

for sitex = 1:length(site)
    for peakx = 1:length(peaks)
        
        header = {'Subject','C1','C2'};
        data(:,1) = 1:size(dataPeakDiff.(site{sitex}).(peaks{peakx}),1);
        data(:,2:3) = dataPeakDiff.(site{sitex}).(peaks{peakx});
        filename = [pathOut,'diff_',(site{sitex}),'_',(peaks{peakx}),'.csv'];
        
        csvwriteh( filename, data, header );
        
    end
end


function csvwriteh( filename, data, header )
%CVSWRITEH write matrix to a csv file with header
% CVSWRITEH( FILENAME, DATA, HEADER )
% function to write a csvfile with a header
% input parameters:
%   FILENAME: filename for csv output file
%   DATA:     matrix with data for csv file
%   HEADER:   cell array with names per column

%% check parameters
% filename parameter
if exist( 'filename', 'var' )
    if ~ischar( filename )
        error('filename not char')
    end
else
    error('filename does not exists')
end
% data parameter
if exist( 'data', 'var' )
    if ~isnumeric( data )
        error('data not numeric')
    end
else
    error('data does not exist')
end
% header parameter
if exist( 'header', 'var' )
    if ~iscellstr( header )
        error('header no cell str')
    end
else
    error('header does not exist')
end

% check dimensions of data and header
[drow dcol] = size (data);
[hrow hcol] = size (header);
if hcol ~= dcol
    error( 'header not of same length as data (columns)' )
end

% open file
outid = fopen (filename, 'w+');

% write header
for idx = 1:hcol
    fprintf (outid, '%s', header{idx});
    if idx ~= hcol
        fprintf (outid, ',');
    else
        fprintf (outid, '\n' );
    end
end
% close file
fclose(outid);

% write data
dlmwrite (filename, data, '-append' );
end
