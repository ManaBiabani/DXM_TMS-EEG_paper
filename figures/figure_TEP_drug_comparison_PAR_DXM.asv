% ##### PLOT CHANGES IN PAR TEPS FOLLOWING DEXTROMETHORPHAN #####

% This script plots topoplots at two time points showing t statistics and 
% Inputs are the grand average structure of the EEG data generated by 
% FieldTrip, and the output from mne_correlate_site.m.

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

% Which data to use
useData = 'sound_final'; % 'ica_final' | 'sound_final'

% Stimulation sites
site = {'pfc';'ppc'}; % two different stimulation sites
cond = 'C1';

pathDef = 'I:\nmda_tms_eeg\';

% Create input path
if strcmp(useData,'ica_final')
    pathIn = [pathDef,'CLEAN_ICA\'];
elseif strcmp(useData,'sound_final')
    pathIn = [pathDef,'CLEAN_SOUND\'];
end

% Load data 
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

load([pathIn,'grandAverage_N14.mat']);
statAll = load([pathIn,'STATS',filesep,cond,'_ppc_T0_VS_',cond,'_ppc_T1_TOI_0.015_0.25_N14.mat']);

% Time variable
time = grandAverage.C1.pfc.T0.time*1000;
labelIn = grandAverage.(cond).pfc.T0.label;

%%

fig = figure; 
set(gcf,'color','w');
letter = {'A';'B';'C';'D'};
L = 0;

tTime = [130,180];
for plotx = 1:length(tTime)
    
    L = L+1;
    
    [~,tp] = min(abs(time-tTime(plotx)));

    subplot(2,2,plotx)
    
    cfg = [];
    cfg.layout = 'easycapM11.mat';
    cfg.comment = 'no';
    cfg.interactive = 'no';
    cfg.zlim = [-3,3];
    cfg.markersymbol = '.';
    
    if strcmp(useData,'ica_final')
        if plotx == 1
            stat = statEarly1.stat;
        elseif plotx == 2 || plotx ==3
            stat = statEarly2.stat;
        else
            stat = statAll.stat;
        end
    else
        stat = statAll.stat;
    end
    
    plotStruc = [];
    plotStruc.time = 1;
    plotStruc.dimord = 'chan';
    plotStruc.label = labelIn;
    
    [~,tpStat] = min(abs(stat.time*1000-tTime(plotx)));
    plotStruc.avg = stat.stat(:,tpStat);
        
    if isfield(stat,'posclusters')
        if ~isempty(stat.posclusters)
            cfg.highlight = 'on';
            cfg.highlightchannel   =  [];
            cfg.highlightsymbol    = '.';
            cfg.highlightsize = 16;
            cfg.highlightcolor   = [0 0 0];
            for clusx = 1:length(stat.posclusters)
                if stat.posclusters(clusx).prob<0.05
                    cfg.highlightchannel   =  vertcat(cfg.highlightchannel,stat.label(stat.posclusterslabelmat(:,tpStat)==clusx));
                end
            end
        end
    end
    if isfield(stat,'negclusters')
        if ~isempty(stat.negclusters)
            if stat.negclusters(1).prob < 0.05
                if isfield(cfg,'highlightchannel')
                    if ~isempty(cfg.highlightchannel) || length(cfg.highlightchannel) == 0
                        cfg.highlight = {'on','on'};
                        cfg.highlightchannel   =  {cfg.highlightchannel,stat.label(stat.negclusterslabelmat(:,tpStat)==1)};
                        cfg.highlightsymbol    = {'.','.'};
                        cfg.highlightsize = {16,16};
                        if strcmp(useData,'ica_final')
                            if plotx == 1 || plotx == 2 || plotx == 3
                                cfg.highlightcolor   = {[0 0 0],[65/255 105/255 255/255-0.01]};
                            else
                                cfg.highlightcolor   = {[0 0 0],[0.99 0.99 0.99]};
                            end
                        else
                            cfg.highlightcolor   = {[0 0 0],[0.99 0.99 0.99]};
                        end
                    end
                else
                    cfg.highlight = 'on';
                    cfg.highlightchannel   =  stat.label(stat.negclusterslabelmat(:,tpStat)==1);
                    cfg.highlightsymbol    = '.';
                    cfg.highlightsize = 16;
                    if strcmp(useData,'ica_final')
                        if plotx == 1 || plotx == 2 || plotx == 3
                            cfg.highlightcolor   = [65/255 105/255 255/255-0.01];
                        else
                            cfg.highlightcolor   = [0.99 0.99 0.99];
                        end
                    else
                        cfg.highlightcolor   = [0.99 0.99 0.99];
                    end
                end
            end
        end
    end
    
    figStat = ft_topoplotER(cfg,plotStruc);
    colormap(gca,'hot');
    
    title([num2str(tTime(plotx)),' ms']);
    
    t = axis;
    text(t(1)-((t(2)-t(1))*0.1893),t(4)+((t(4)-t(3))*0.15),letter{L},'horizontalalignment','center','fontsize',16,'fontweight','bold');

    if plotx == length(tTime)
        c = colorbar;
        tmpc = c.Position;
        c.Position = [tmpc(1)-0.3,tmpc(2)-0,tmpc(3),0.2];
        c.LineWidth = 1.5;
        c.Ticks = [-3;0;3];
        c.FontSize = 12;
        title(c,'t');
    end
    
end

elecIn = [17,61]; % Fz and POz
N = 2;
for elecx = 1:length(elecIn)
    
    L = L+1;
    
    elec = elecIn(1,elecx);
    
    data1 = squeeze(grandAverage.C1.ppc.T0.individual(:,elec,:));
    data1Mean = mean(data1,1);
    data1CI = (std(data1,[],1)./sqrt(size(data1,1)))*1.96;
    
    data2 = squeeze(grandAverage.C1.ppc.T1.individual(:,elec,:));
    data2Mean = mean(data2,1);
    data2CI = (std(data2,[],1)./sqrt(size(data1,1)))*1.96;
    
    [H{elecx},P{elecx}] = ttest(data1,data2);
    
    N = N+1;
    subplot(2,2,N)
    h1 = plot(time,data1Mean,'b','linewidth',2); hold on;
    f = fill([time,fliplr(time)],[data1Mean-data1CI,fliplr(data1Mean+data1CI)],'b');
    set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
    
    h2 = plot(time,data2Mean,'r','linewidth',2);
    f = fill([time,fliplr(time)],[data2Mean-data2CI,fliplr(data2Mean+data2CI)],'r');
    set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
    
    plot([0,0],[-10,10],'k--','linewidth',1.5);
    set(gca,'ylim',[-2,2]);
    
    if elecx == 1
        logIn = sum(stat.negclusterslabelmat == 1);
        yData = ones(1,length(logIn))*-2;
        yData(logIn==0)= NaN;
        plot(stat.time*1000,yData,'b','linewidth',4);
    elseif elecx == 2
        logIn = sum(stat.posclusterslabelmat == 1);
        yData = ones(1,length(logIn))*-2;
        yData(logIn==0)= NaN;
        plot(stat.time*1000,yData,'r','linewidth',4);
    end
    
    set(gca,'box','off','tickdir','out','xlim',[-100,300],'linewidth',1.5,'fontsize',12);
    
    xlabel('Time (ms)')
    ylabel('Amplitude (\muV)');
    if elecx == 1
        title(['Fz']);
%         set(gca,'ylim',[-4,4]);
        text(-190,2*1.3,letter{L},'fontsize',16,'fontweight','bold');
    else
        title(['POz']);
%         set(gca,'ylim',[-2,2]);
        text(-190,2*1.3,letter{L},'fontsize',16,'fontweight','bold');
    end
    
    if N==4
        [hh,icons,plots,txt] = legend([h1,h2],{'Pre','Post'},'box','off','location','northeast','fontsize',12);
        p1 = icons(1).Position;
        p2 = icons(2).Position;
        icons(1).Position = [0.7 p1(2)+0.3 0];
        icons(3).XData = [0.45 0.65];
        icons(3).YData = [p1(2)+0.3 p1(2)+0.3];
        icons(2).Position = [0.7 p2(2)+0.3 0];
        icons(5).XData = [0.45 0.65];
        icons(5).YData = [p2(2)+0.3 p2(2)+0.3];
    end
    
   
    
end

set(fig,'position', [650 450 630 500]);

pathOut = 'H:\My Drive\Science\Manuscripts\0000_Rogasch_TMS-EEG and dextromethorphan\figures\';
savename = [pathOut,'TEPs_PAR_',useData];
set(gcf,'PaperPositionMode','auto');
print(fig,'-dsvg',savename);
print(fig,'-dpng',savename);


