% ##### PLOT TEP RELIABILITY OUTPUTS #####

% This script plots comparisons of within- and between-individual TEP differences. 
% Inputs are the grand average structure of the EEG data generated by 
% FieldTrip, and the output from organise_data_output.m.

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

% Which data to use
useData = 'sound_final'; % 'ica_final' | 'sound_final'
scaleMethod = 'none'; % 'scale' | 'zscore' |'none' : scale uses an iterative scale proceduce designed by Ben. Zscore takes the z score (which will alter the baseline of the measure). None takes the raw data.

% Stimulation sites
site = {'pfc';'ppc'}; % two different stimulation sites

% Time variable
if strcmp(useData,'ica_final')
    time = -1500:1:1499;
elseif strcmp(useData,'sound_final')
    time = -1000:1:999;
end

pathDef = 'I:\nmda_tms_eeg\';

% Create input path
if strcmp(useData,'ica_final')
    pathIn = [pathDef,'CLEAN_ICA\'];
elseif strcmp(useData,'sound_final')
    pathIn = [pathDef,'CLEAN_SOUND\'];
end

% Load data
load([pathIn,'SHAPE',filesep,useData,'_output_shape_',scaleMethod]);

% Load additional data for topoplots 
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

load([pathIn,'grandAverage_N14.mat']);
labelIn = grandAverage.C1.pfc.T0.label;

for sitex = 1:size(site,1)
    matchAllT.(site{sitex}) = diag(zDiffAllT.(site{sitex}));
    triUpAllT.(site{sitex}) = zDiffAllT.(site{sitex})(triu(zDiffAllT.(site{sitex}),1)~=0);
    triLowAllT.(site{sitex}) = zDiffAllT.(site{sitex})(tril(zDiffAllT.(site{sitex}),-1)~=0);
end

% Compare the diagonal with upper and lower triangles for all channels
for sitex = 1:size(site,1)
    for chanx = 1:size(zDiffChan.pfc,3)
        
        tempIn = zDiffChan.(site{sitex})(:,:,chanx);
        
        match.(site{sitex}) = diag(tempIn);
        triUp.(site{sitex}) = tempIn(triu(tempIn,1)~=0);
        triLow.(site{sitex}) = tempIn(tril(tempIn,-1)~=0);
        
        [StatChan.(site{sitex}).uP(chanx,1),~,StatChan.(site{sitex}).uS(chanx,1)] = ranksum(match.(site{sitex}),triUp.(site{sitex}));
        [StatChan.(site{sitex}).lP(chanx,1),~,StatChan.(site{sitex}).lS(chanx,1)] = ranksum(match.(site{sitex}),triLow.(site{sitex}));
        
        % Calculate U values
        uChan.(site{sitex}).uP(chanx,1) = StatChan.(site{sitex}).uS(chanx,1).ranksum-((length(match.(site{sitex})).*(length(match.(site{sitex}))+1))./2);
        uChan.(site{sitex}).lP(chanx,1) = StatChan.(site{sitex}).lS(chanx,1).ranksum-((length(match.(site{sitex})).*(length(match.(site{sitex}))+1))./2);
        
        % Calculate Rho values
        rhoChan.(site{sitex}).uP(chanx,1) = uChan.(site{sitex}).uP(chanx,1)./(length(match.(site{sitex})).*length(triUp.(site{sitex})));
        rhoChan.(site{sitex}).lP(chanx,1) = uChan.(site{sitex}).lP(chanx,1)./(length(match.(site{sitex})).*length(triLow.(site{sitex})));
        
    end
end

% Compare the diagonal with upper and lower triangles for all time points
for sitex = 1:size(site,1)
    for timex = 1:length(time)
        
        tempIn = zDiffTime.(site{sitex})(:,:,timex);
        
        match.(site{sitex}) = diag(tempIn);
        triUp.(site{sitex}) = tempIn(triu(tempIn,1)~=0);
        triLow.(site{sitex}) = tempIn(tril(tempIn,-1)~=0);
        
        [StatTime.(site{sitex}).uP(timex,1),~,StatTime.(site{sitex}).uS(timex,1)] = ranksum(match.(site{sitex}),triUp.(site{sitex}));
        [StatTime.(site{sitex}).lP(timex,1),~,StatTime.(site{sitex}).lS(timex,1)] = ranksum(match.(site{sitex}),triLow.(site{sitex}));
        
        % Calculate U values
        uTime.(site{sitex}).uP(timex,1) = StatTime.(site{sitex}).uS(timex,1).ranksum-((length(match.(site{sitex})).*(length(match.(site{sitex}))+1))./2);
        uTime.(site{sitex}).lP(timex,1) = StatTime.(site{sitex}).lS(timex,1).ranksum-((length(match.(site{sitex})).*(length(match.(site{sitex}))+1))./2);
        
        % Calculate Rho values
        rhoTime.(site{sitex}).uP(timex,1) = uTime.(site{sitex}).uP(timex,1)./(length(match.(site{sitex})).*length(triUp.(site{sitex})));
        rhoTime.(site{sitex}).lP(timex,1) = uTime.(site{sitex}).lP(timex,1)./(length(match.(site{sitex})).*length(triLow.(site{sitex})));
        
    end
end
 
% fig1 = figure;
% 
% % Plot the matrix
% subplot(3,2,1)
% tempData1 = squeeze(grandAverage.C1.pfc.T0.individual(4,:,:));
% imagesc(tempData1);
% 
% subplot(3,2,2)
% tempData2 = squeeze(grandAverage.C2.pfc.T0.individual(4,:,:));
% imagesc(tempData2);
% 
% subplot(3,2,3)
% tempData3 = tempData1 - tempData2;
% imagesc(tempData3);
% 
% % Plot the matrix
% subplot(3,2,4)
% tempData1 = squeeze(grandAverage.C1.pfc.T0.individual(4,:,:));
% imagesc(tempData1);
% 
% subplot(3,2,5)
% tempData2 = squeeze(grandAverage.C2.pfc.T0.individual(1,:,:));
% imagesc(tempData2);
% 
% subplot(3,2,6)
% tempData3 = tempData1 - tempData2;
% imagesc(tempData3);
        
% % Set the colour limits
% caxis([0,maxValAll]);
% 
% title([site{sitex},' ',con{conx}]);
% xlabel('Channels');
% ylabel('Subjects');
% colorbar;

xpos1 = 0.14;
xpos2 = 0.57;
ypos1 = 0.7;
ypos2 = 0.32;
ypos3 = 0.1;

bwidth = 0.3;
bheight = 0.22;

twidth = 0.35;
theight = 0.35;

horzShift = -0.03;

fig = figure;
set(gcf,'color','w');

% Plot the differences using violin plot
pos = [xpos1,ypos1,bwidth,bheight];
h1 = subplot('position',pos);
dataCell = {matchAllT.pfc,triUpAllT.pfc};
BF_JitteredParallelScatter(dataCell,1,1,0);

set(gca,'xlim',[0.5,2.5],'xtick',1:2,'xticklabel',{'Within','Between'},'tickdir','out','box','off','linewidth',1.5,'fontsize',12);
ylabel('Mean TEP diff. (\Delta\muV)');
title('PFC');

text(-0.2,4.4,'A','FontSize',16,'FontWeight','bold');
text(0.97,2,'*','FontSize',16,'FontWeight','bold');

% Plot topoplot for upper
pos = [xpos1+horzShift,ypos2,twidth,theight];
h2 = subplot('position',pos);

% Settings for topoplot
tempData = [StatChan.pfc.uS.zval];
plotStruc = [];
plotStruc.avg = tempData';
plotStruc.time = 1;
plotStruc.dimord = 'chan';
plotStruc.label = labelIn;

cfg = [];
cfg.zlim = [-5,0];
cfg.layout = 'easycapM11.mat'; 
cfg.comment = 'no';
cfg.interactive = 'no';
cfg.markersymbol = '.';
cfg.highlight = 'on';
chanLog = [StatChan.pfc.uS.zval]<-1.96;
cfg.highlightchannel   =  labelIn(chanLog');
cfg.highlightsymbol    = '.';
cfg.highlightsize = 16;
cfg.highlightcolor   = [0.99 0.99 0.99];
ft_topoplotER(cfg,plotStruc);
% g.Position(1,3) = g.Position(1,3)*1.5;
% g.Position(1,4) = g.Position(1,4)*1.5;

% title('Within v between','fontsize',14,'fontweight','normal');

c = colorbar;
c.LineWidth = 1.5;
c.FontSize = 14;
c.Position = [0.47,0.40,0.03,0.15];
c.Ticks = [-5,0];
title(c,'z');

text(-1.01,0.65,'C','FontSize',16,'FontWeight','bold');

pos = [xpos1,ypos3,bwidth,bheight];
h3 = subplot('position',pos);

% plot(time,rhoTime.pfc.uP,'linewidth',2); hold on;
tempData = [StatTime.pfc.uS.zval];
plot(time,tempData,'linewidth',3); hold on;
tempLog = ones(1,length(tempData))*-5;
tempLog(StatTime.pfc.uP >= 0.05) = nan;
plot(time,tempLog,'r','linewidth',5);
plot([time(1,1),time(1,end)],[0,0],'k--','linewidth',2);
plot([time(1,1),time(1,end)],[-1.96,-1.96],'r--','linewidth',2);
plot([time(1,1),time(1,end)],[1.96,1.96],'r--','linewidth',2);
plot([0,0],[-5,5],'k:','linewidth',2);


set(gca,'box','off','xlim',[-200,600],'ylim',[-5,5],'tickdir','out','box','off','linewidth',1.5,'fontsize',12)
xlabel('Time (ms)')
ylabel('Within v between (z)')

text(-450,6.5,'E','FontSize',16,'FontWeight','bold');
    
% Plot the differences using violin plot
pos = [xpos2,ypos1,bwidth,bheight];
h4 = subplot('position',pos);
dataCell = {matchAllT.ppc,triUpAllT.ppc};
BF_JitteredParallelScatter(dataCell,1,1,0);

set(gca,'xlim',[0.5,2.5],'xtick',1:2,'xticklabel',{'Within','Between'},'ylim',[0,4],'tickdir','out','box','off','linewidth',1.5,'fontsize',12);
ylabel('Mean TEP diff. (\Delta\muV)');
title('PAR');

text(-0.2,4.4,'B','FontSize',16,'FontWeight','bold');
text(0.97,2,'*','FontSize',16,'FontWeight','bold');


% Plot topoplot for upper
pos = [xpos2+horzShift,ypos2,twidth,theight];
h5 = subplot('position',pos);

% Settings for topoplot
tempData = [StatChan.ppc.uS.zval];
plotStruc = [];
plotStruc.avg = tempData';
plotStruc.time = 1;
plotStruc.dimord = 'chan';
plotStruc.label = labelIn;

cfg = [];
cfg.zlim = [-5,0];
cfg.layout = 'easycapM11.mat'; 
cfg.comment = 'no';
cfg.interactive = 'no';
cfg.markersymbol = '.';
cfg.highlight = 'on';
chanLog = [StatChan.ppc.uS.zval]<-1.96;
cfg.highlightchannel   =  labelIn(chanLog');
cfg.highlightsymbol    = '.';
cfg.highlightsize = 16;
cfg.highlightcolor   = [0.99 0.99 0.99];
topo = ft_topoplotER(cfg,plotStruc);

% title('Within v between','fontsize',14,'fontweight','normal');

% c = colorbar;
% c.LineWidth = 1.5;
% c.FontSize = 14;
% c.Position = [0.48,0.41,0.03,0.15];
% title(c,'z');

text(-1.01,0.65,'D','FontSize',16,'FontWeight','bold');

pos = [xpos2,ypos3,bwidth,bheight];
h6 = subplot('position',pos);

tempData = [StatTime.ppc.uS.zval];
plot(time,tempData,'linewidth',3); hold on;
% plot(time,rhoTime.ppc.uP,'linewidth',2); hold on;
tempLog = ones(1,length(tempData))*-5;
tempLog(StatTime.ppc.uP >= 0.05) = nan;
plot(time,tempLog,'r','linewidth',5);
plot([time(1,1),time(1,end)],[0,0],'k--','linewidth',2);
plot([time(1,1),time(1,end)],[-1.96,-1.96],'r--','linewidth',2);
plot([time(1,1),time(1,end)],[1.96,1.96],'r--','linewidth',2);
plot([0,0],[-5,5],'k:','linewidth',2);

set(gca,'box','off','xlim',[-200,600],'ylim',[-5,5],'tickdir','out','box','off','linewidth',1.5,'fontsize',12)
xlabel('Time (ms)')
ylabel('Within v between (z)')

text(-450,6.5,'F','FontSize',16,'FontWeight','bold');

set(fig,'position', [300 340 600 650]);

pathOut = '\figures\';
savename = [pathOut,'TEP_reliability_',useData];
set(gcf,'PaperPositionMode','auto');
print(fig,'-dsvg',savename);
print(fig,'-dpng',savename);
   