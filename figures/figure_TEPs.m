% ##### PLOT BASELINE TEPS #####

% This script plots baseline TEP butterfly plots, topoplots and MNE source
% maps. 
% Inputs are the grand average structure of the EEG data generated by 
% FieldTrip, stats following cluster-based permutation tests between
% baseline TEPs, and MNE source maps.

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

% Which data to use
useData = 'sound_final'; % 'ica_final' | 'sound_final'

% Stimulation sites
site = {'pfc';'ppc'}; % two different stimulation sites
cond = 'average';

% Location of 'sound_final' file
pathDef = 'I:\nmda_tms_eeg\';


% Create input path
if strcmp(useData,'ica_final')
    pathIn = [pathDef,'CLEAN_ICA\'];
elseif strcmp(useData,'sound_final')
    pathIn = [pathDef,'CLEAN_SOUND\'];
end

% Load data 
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

load([pathIn,'grandAverage_N14.mat']);
statAll = load([pathIn,'STATS',filesep,cond,'_pfc_T0_VS_',cond,'_ppc_T0_TOI_0.015_0.25_N14.mat']);
statEarly1 = load([pathIn,'STATS',filesep,cond,'_pfc_T0_VS_',cond,'_ppc_T0_TOI_0.015_0.03_N14.mat']);
statEarly2 = load([pathIn,'STATS',filesep,cond,'_pfc_T0_VS_',cond,'_ppc_T0_TOI_0.031_0.045_N14.mat']);

% Time variable
time = grandAverage.C1.pfc.T0.time*1000;

%%

N = size(grandAverage.(cond).pfc.T0.individual,1);

% Calculate correlations between sites
for idx = 1:size(grandAverage.(cond).pfc.T0.individual,1)
    for timex = 1:size(grandAverage.(cond).pfc.T0.individual,3)
        rho(idx,timex) = corr(squeeze(grandAverage.(cond).pfc.T0.individual(idx,:,timex))', squeeze(grandAverage.(cond).ppc.T0.individual(idx,:,timex))','type','Spearman');
    end
end

% Calculate 95% confidence intervals
meanRho = mean(rho,1);
seRho = std(rho,[],1)./sqrt(N);
CIRho = 1.96*seRho;

% Compare Rho using a rank sum test
rhoTime = 15:1000;

for rhox = 1:length(rhoTime)
    [~,tp1] = min(abs(-rhoTime(rhox)-time));
    [~,tp2] = min(abs(rhoTime(rhox)-time));
    
    rhoP(rhox) = ranksum(rho(:,tp1),rho(:,tp2));
end

%%

close all;

meanPFC = squeeze(mean(grandAverage.(cond).pfc.T0.individual,1));
meanPAR = squeeze(mean(grandAverage.(cond).ppc.T0.individual,1));
labelIn = grandAverage.(cond).pfc.T0.label;

fig = figure;
set(gcf,'color','w');

tTime = [25,35,45,55,75,110,200];
tTimePosPFC = [tTime(2),tTime(4),tTime(5),tTime(7)];
tTimeNegPFC = [tTime(1),tTime(3),tTime(6)];
tTimePosPAR = [tTime(1),tTime(3),tTime(5),tTime(7)];
tTimeNegPAR = [tTime(2),tTime(4),tTime(6)];

for tx = 1:length(tTimePosPFC)
    [~,tp1] = min(abs(time-tTimePosPFC(tx)));
    [~,tp2] = min(abs(time-tTimePosPAR(tx)));
    pfcTriPos(tx) = max(meanPFC(:,tp1))+0.75;
    parTriPos(tx) = max(meanPAR(:,tp2))+0.75;
end

for tx = 1:length(tTimeNegPAR)
    [~,tp1] = min(abs(time-tTimeNegPFC(tx)));
    [~,tp2] = min(abs(time-tTimeNegPAR(tx)));
    pfcTriNeg(tx) = min(meanPFC(:,tp1))-0.75;
    parTriNeg(tx) = min(meanPAR(:,tp2))-0.75;
end

% Butterfly plots
bwidth = 0.37;
bheight = 0.22;
bypos = 0.72;

pos1 = [0.1,bypos,bwidth,bheight];
subplot('position',pos1)
plot(time,meanPFC,'k','linewidth',1.5);hold on;
plot(tTimePosPFC,pfcTriPos,'bv','linewidth',1.5);
plot(tTimeNegPFC,pfcTriNeg,'b^','linewidth',1.5);
plot([0,0],[-4,4],'r--','linewidth',1.5);
set(gca,'xlim',[-100,300],'ylim',[-4,4],'box','off','tickdir','out','linewidth',1.5,'fontsize',12);
xlabel('Time (ms)');
ylabel('Amplitude (\muV)');
title('Prefrontal (PFC)');
text(-160,4.5,'A','horizontalalignment','center','fontsize',16);

pos2 = [0.55,bypos,bwidth,bheight];
subplot('position',pos2)
plot(time,meanPAR,'k','linewidth',1.5); hold on;
plot(tTimePosPAR,parTriPos,'bv','linewidth',1.5);
plot(tTimeNegPAR,parTriNeg,'b^','linewidth',1.5);
plot([0,0],[-4,4],'r--','linewidth',1.5);
set(gca,'xlim',[-100,300],'ylim',[-4,4],'box','off','tickdir','out','linewidth',1.5,'fontsize',12);
xlabel('Time (ms)');
ylabel('Amplitude (\muV)');
title('Parietal (PAR)');
text(-160,4.5,'B','horizontalalignment','center','fontsize',16);

% pos3 = [0.7,bypos,bwidth,bheight];
% subplot('position',pos3)
% plot(time,mean(rho,1),'linewidth',1.5); hold on;
% f = fill([time,fliplr(time)],[meanRho-CIRho,fliplr(meanRho+CIRho)],'b');
% set(f,'FaceAlpha',0.3);set(f,'EdgeColor', 'none');
% tempLog = zeros(1,length(rhoTime));
% tempLog(rhoP >= 0.05) = nan;
% plot(rhoTime,tempLog,'r','linewidth',5);
% plot([time(1,1),time(1,end)],[0,0],'k--','linewidth',1.5);
% plot([0,0],[-4,4],'r--','linewidth',1.5);
% set(gca,'xlim',[-100,300],'ylim',[-1,1],'box','off','tickdir','out','linewidth',1.5,'fontsize',12);
% xlabel('Time (ms)');
% ylabel('Correlation (\rho)');
% title('PFC vs. PAR');
% text(-200,1.125,'C','horizontalalignment','center','fontsize',16);

% Topoplots
twidth = 0.12;
theight = 0.12;

txpos = linspace(0.07,(1-0.07-twidth),7);
typos = [0.51,0.39,0.27];

plotStruc = [];
plotStruc.time = 1;
plotStruc.dimord = 'chan';
plotStruc.label = labelIn;
 
ix = 4:length(tTime)*3+3;
ix = reshape(ix,3,[]);
for plotx = 1:length(tTime)
    
    [~,tp] = min(abs(time-tTime(plotx)));
    
    posName = ['pos',num2str(ix(1,plotx))];
    pos.(posName) = [txpos(plotx),typos(1),twidth,theight];
    subplot('position',pos.(posName))
    plotStruc.avg = meanPFC(:,tp);
    cfg = [];
    cfg.layout = 'easycapM11.mat';
    cfg.comment = 'no';
    cfg.interactive = 'no';
    cfg.zlim = [-1,1];
    cfg.markersymbol = '.';
    ft_topoplotER(cfg,plotStruc);
    text(0,0.85,[num2str(tTime(plotx)),' ms'],'horizontalalignment','center','fontsize',12);
    if plotx == 1
        t = axis;
        text(t(1)-((t(2)-t(1))*0.1893),t(4)-((t(4)-t(3))*0.5311),'PFC','horizontalalignment','center','fontsize',12);
        text(t(1)-((t(2)-t(1))*0.1893),t(4)+((t(4)-t(3))*0.3002),'C','horizontalalignment','center','fontsize',16);
    end
    if plotx == length(tTime);
        c = colorbar;
        tmpc = c.Position;
        c.Position = [tmpc(1)+0.06,tmpc(2)-0.03,tmpc(3),0.07];
        c.LineWidth = 1.5;
        c.Ticks = [-1;0;1];
        title(c,'\muV');
    end
    
    posName = ['pos',num2str(ix(2,plotx))];
    pos.(posName) = [txpos(plotx),typos(2),twidth,theight];
    subplot('position',pos.(posName))
    plotStruc.avg = meanPAR(:,tp);
    cfg = [];
    cfg.layout = 'easycapM11.mat';
    cfg.comment = 'no';
    cfg.interactive = 'no';
    cfg.zlim = [-1,1];
    cfg.markersymbol = '.';
    ft_topoplotER(cfg,plotStruc);
    if plotx == 1
        t = axis;
        text(t(1)-((t(2)-t(1))*0.1893),t(4)-((t(4)-t(3))*0.5311),'PAR','horizontalalignment','center','fontsize',12);
    end
    if plotx == length(tTime);
        c = colorbar;
        tmpc = c.Position;
        c.Position = [tmpc(1)+0.06,tmpc(2)-0.03,tmpc(3),0.07];
        c.LineWidth = 1.5;
        c.Ticks = [-1;0;1];
        title(c,'\muV');
    end
    
    posName = ['pos',num2str(ix(3,plotx))];
    pos.(posName) = [txpos(plotx),typos(3),twidth,theight];
    subplot('position',pos.(posName))
    
    cfg = [];
    cfg.layout = 'easycapM11.mat';
    cfg.comment = 'no';
    cfg.interactive = 'no';
    cfg.zlim = [-3,3];
    cfg.markersymbol = '.';
    
    if strcmp(useData,'ica_final')
        if plotx == 1
            stat = statEarly1.stat;
        elseif plotx == 2 || plotx ==3
            stat = statEarly2.stat;
        else
            stat = statAll.stat;
        end
    else
        stat = statAll.stat;
    end
    
    [~,tpStat] = min(abs(stat.time*1000-tTime(plotx)));
    plotStruc.avg = stat.stat(:,tpStat);
    
    if isfield(stat,'posclusters')
        if ~isempty(stat.posclusters)
            cfg.highlight = 'on';
            cfg.highlightchannel   =  [];
            cfg.highlightsymbol    = '.';
            cfg.highlightsize = 16;
            cfg.highlightcolor   = [0 0 0];
            for clusx = 1:length(stat.posclusters)
                if stat.posclusters(clusx).prob<0.05
                    cfg.highlightchannel   =  vertcat(cfg.highlightchannel,stat.label(stat.posclusterslabelmat(:,tpStat)==clusx));
                end
            end
        end
    end
    if isfield(stat,'negclusters')
        if ~isempty(stat.negclusters)
            if stat.negclusters(1).prob < 0.05
                if isfield(cfg,'highlightchannel')
                    if ~isempty(cfg.highlightchannel) || length(cfg.highlightchannel) == 0
                        cfg.highlight = {'on','on'};
                        cfg.highlightchannel   =  {cfg.highlightchannel,stat.label(stat.negclusterslabelmat(:,tpStat)==1)};
                        cfg.highlightsymbol    = {'.','.'};
                        cfg.highlightsize = {16,16};
                        if strcmp(useData,'ica_final')
                            if plotx == 1 || plotx == 2 || plotx == 3
                                cfg.highlightcolor   = {[0 0 0],[65/255 105/255 255/255-0.01]};
                            else
                                cfg.highlightcolor   = {[0 0 0],[0.99 0.99 0.99]};
                            end
                        else
                            cfg.highlightcolor   = {[0 0 0],[0.99 0.99 0.99]};
                        end
                    end
                else
                    cfg.highlight = 'on';
                    cfg.highlightchannel   =  stat.label(stat.negclusterslabelmat(:,tpStat)==1);
                    cfg.highlightsymbol    = '.';
                    cfg.highlightsize = 16;
                    if strcmp(useData,'ica_final')
                        if plotx == 1 || plotx == 2 || plotx == 3
                            cfg.highlightcolor   = [65/255 105/255 255/255-0.01];
                        else
                            cfg.highlightcolor   = [0.99 0.99 0.99];
                        end
                    else
                        cfg.highlightcolor   = [0.99 0.99 0.99];
                    end
                end
            end
        end
    end
    
    figStat = ft_topoplotER(cfg,plotStruc);
    colormap(gca,'hot');
    if plotx == 1
        t = axis;
        text(t(1)-((t(2)-t(1))*0.1893),t(4)-((t(4)-t(3))*0.5311),'Stat','horizontalalignment','center','fontsize',12);
    end
    if plotx == length(tTime)
        c = colorbar;
        tmpc = c.Position;
        c.Position = [tmpc(1)+0.06,tmpc(2)-0.03,tmpc(3),0.07];
        c.LineWidth = 1.5;
        c.Ticks = [-3;0;3];
        title(c,'t');
    end
end

% PLOT MNE

twidth = 0.11;
theight = 0.11;

txpos = linspace(0.07,(1-0.07-twidth),7);
typos = [0.14,0.01];

% Threshold for activity to plot
thresh = 0.85;

% Smoothness of the cortex
smoothValue = 0.5;

% Time of interest
toi = tTime;

% Load MNE data
load([pathIn,'MNE\mne_',useData],'mne');

% Load the target points in MNI space
sMri = load('F:\brainstorm_db\TMS-EEG_NMDA\anat\@default_subject\subjectimage_T1.mat');
pfc_mni = [-0.020, 0.035, 0.055]; % PFC
pfc_scs = cs_convert(sMri, 'mni', 'scs', pfc_mni);
ppc_mni = [-0.020, -0.065, 0.065]; % PPC
ppc_scs = cs_convert(sMri, 'mni', 'scs', ppc_mni);
[pfc_I,pfc_dist] = bst_nearest(mne.anat_def.Vertices,pfc_scs, 1, 0);
[ppc_I,ppc_dist] = bst_nearest(mne.anat_def.Vertices,ppc_scs, 1, 0);

% Cortical surface figure settings
sSurf = mne.anat_def;
iVertices = 1:length(sSurf.Vertices);
SurfSmoothIterations = ceil(300 * smoothValue * length(iVertices) / 100000);
Vertices_sm = sSurf.Vertices;
Vertices_sm(iVertices,:) = tess_smooth(sSurf.Vertices(iVertices,:), smoothValue, SurfSmoothIterations, sSurf.VertConn(iVertices,iVertices), 1);

vertFull = Vertices_sm;
facesFull = mne.anat_def.Faces;
curvData = mne.anat_def.Curvature;

msh_curvature           = -curvData.';
mod_depth               = 0.5;
curvatureColorValues    = ((2*msh_curvature>0) - 1) * mod_depth * 128 + 127.5;

curvatureColorValues(find(curvatureColorValues == 63.5)) = 130; % Original 85
curvatureColorValues(find(curvatureColorValues == 127.5)) = 85; % Original 130
curvData = [curvatureColorValues;curvatureColorValues;curvatureColorValues].';
curvData = curvData/255;

addpath('H:\My Drive\Science\Scripts\miscellaneous\kevin_surface_plots\');

for sitex = 1:length(site)
    for toix = 1:length(toi)
        % Generate figure
        
        subplot('position',[txpos(toix),typos(sitex),twidth,theight]);
        
        hold on;
        surfaceHandle = patch('Vertices',vertFull,'Faces',facesFull,'FaceVertexCdata',curvData,'FaceColor','interp','EdgeColor','none','FaceAlpha',1);
        axis image;
        axis off;
        
        view([-90,90])
        h = camlight('left');
        h = camlight('right');
        %         h = camlight;
        material('dull');
        
        faceVDataCurv = get(surfaceHandle,'FaceVertexCData'); % Here always keep!
        
        cmap = jet(100).';
        %         cmap = cmap(:,end:-1:1);
        
        FaceVData = faceVDataCurv;
        data = mean(mne.(site{sitex}){toix},2);
        
        cols = meshData2Colors(data, cmap, [], 1).';
        
        % Set the colours to plot
        maxVal = max(data);
        inds = find(data>maxVal*thresh);
        
        FaceVData(inds,:) = cols(inds,:);
        
        set(surfaceHandle,'FaceVertexCData',FaceVData);
        
        if strcmp(site{sitex},'pfc')
            plot3(mne.anat_def.Vertices(pfc_I,1),mne.anat_def.Vertices(pfc_I,2),mne.anat_def.Vertices(pfc_I,3),'b.','MarkerSize',30);
        elseif strcmp(site{sitex},'ppc')
            plot3(mne.anat_def.Vertices(ppc_I,1),mne.anat_def.Vertices(ppc_I,2),mne.anat_def.Vertices(ppc_I,3),'g.','MarkerSize',30);
        end
        
        if sitex == 1 && toix == 1
            t = axis;
            ysf = 0.4;
            text(t(2)-((t(2)-t(1))*0.5311),-(t(3)-((t(4)-t(3))*ysf)),1,'PFC','horizontalalignment','center','fontsize',12);
            text(t(2)+((t(2)-t(1))*0.1),-(t(3)-((t(4)-t(3))*ysf))+0.01,'D','horizontalalignment','center','fontsize',16);
        end
        
        if sitex == 2 && toix == 1
            t = axis;
            text(t(2)-((t(2)-t(1))*0.5311),t(4)+((t(4)-t(3))*ysf),1,'PAR','horizontalalignment','center','fontsize',12);
        end
        
        if toix == length(tTime)
            colormap(gca,'jet');
            c = colorbar;
            tmpc = c.Position;
            c.Position = [tmpc(1)+0.028,tmpc(2)+0.01,tmpc(3),0.07];
            c.LineWidth = 1.5;
            c.Ticks = [0,1];
            c.TickLabels = {'0','max'};
%             title(c,'t');
        end
        
    end
end


set(fig,'position', [200 60 1000 940]);

pathOut = '\figures\';
savename = [pathOut,'TEPs_',useData];
set(gcf,'PaperPositionMode','auto');
print(fig,'-dsvg',savename);
print(fig,'-dpng',savename);




