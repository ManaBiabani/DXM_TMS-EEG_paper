% ##### PLOT CONDITION COMPARISONS OF TEP CHANGES WITH DRUGS #####

% This script plots TEP topoplots showing changes in TEPs following
% dextromethorphan and placebo and stats comparing conditions.
% Inputs are the grand average structure of the EEG data generated by 
% FieldTrip, the output from find_gmfa_peaks.m, and the output of
% cluster-based permutation tests (time x drug interaction).

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

% Which data to use
useData = 'ica_final'; % 'ica_final' | 'sound_final'

% Stimulation sites
site = {'pfc';'ppc'}; % two different stimulation sites
con = {'C1';'C2'};

% Location of 'sound_final' file
pathDef = 'I:\nmda_tms_eeg\';

% Create input path
if strcmp(useData,'ica_final')
    pathIn = [pathDef,'CLEAN_ICA\'];
elseif strcmp(useData,'sound_final')
    pathIn = [pathDef,'CLEAN_SOUND\'];
end

% Load data 
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

load([pathIn,'grandAverage_N14.mat']);
load([pathIn,'peak_latency_ranges.mat']);

% Time variable
time = grandAverage.C1.pfc.T0.time*1000;

% Peaks
peaks.pfc = latencies.pfc;
peaks.ppc = latencies.ppc;

TOI = [];

for sitex = 1:length(site)
    for latx = 1:length(latencies.(site{sitex}))
        if latencies.(site{sitex})(latx)<100
            N=5;
        else
            N=15;
        end
        TOI.(site{sitex}){latx,1}(1,1) = (latencies.(site{sitex})(latx)-N)./1000;
        TOI.(site{sitex}){latx,1}(1,2) = (latencies.(site{sitex})(latx)+N)./1000;
    end
end

% % TOIs
% TOI.pfc = {[0.033-0.005,0.033+0.005];...
%     [0.045-0.005,0.045+0.005];...
%     [0.062-0.005,0.062+0.005];...
%     [0.078-0.005,0.078+0.005];...
%     [0.115-0.015,0.115+0.015];...
%     [0.183-0.015,0.183+0.015]}; % PFC time windows
% 
% TOI.ppc = {[0.026-0.005,0.026+0.005];...
%     [0.041-0.005,0.041+0.005];...
%     [0.056-0.005,0.056+0.005];...
%     [0.072-0.005,0.072+0.005];...
%     [0.111-0.015,0.111+0.015];...
%     [0.19-0.015,0.19+0.015]}; % PPC time windows

%% PLOT DATA

meanData.pfc.C1 = squeeze(mean(grandAverage.C1.pfc.diff.individual,1));
meanData.pfc.C2 = squeeze(mean(grandAverage.C2.pfc.diff.individual,1));
meanData.ppc.C1 = squeeze(mean(grandAverage.C1.ppc.diff.individual,1));
meanData.ppc.C2 = squeeze(mean(grandAverage.C2.ppc.diff.individual,1));
labelIn = grandAverage.C1.pfc.T0.label;

% Topoplots 
twidth = 0.12;
theight = 0.12;

fig = figure;

for sitex = 1:length(site)
    
    tTime = peaks.(site{sitex});
    
    txpos = linspace(0.07,(1-0.07-twidth),length(peaks.(site{sitex})));
    typos(:,1) = flip(linspace(0.5+0.05,(1-0.09-theight),3));
    typos(:,2) = flip(linspace(0.05,(0.5-0.09-theight),3));
    
    plotStruc = [];
    plotStruc.time = 1;
    plotStruc.dimord = 'chan';
    plotStruc.label = labelIn;
    
    ix = 4:length(tTime)*3+3;
    ix = reshape(ix,3,[]);
    
    for plotx = 1:length(tTime)
        
        % TOP PANEL PLOT (C1)
        [~,tp] = min(abs(time-tTime(plotx)));
        
        posName = ['pos',num2str(ix(1,plotx))];
        pos.(posName) = [txpos(plotx),typos(1,sitex),twidth,theight];
        subplot('position',pos.(posName))
        plotStruc.avg = meanData.(site{sitex}).C1(:,tp);
        cfg = [];
        cfg.layout = 'easycapM11.mat';
        cfg.comment = 'no';
        cfg.interactive = 'no';
        cfg.zlim = [-1,1];
        cfg.markersymbol = '.';
        ft_topoplotER(cfg,plotStruc);
        text(0,0.85,[num2str(tTime(plotx)),' ms'],'horizontalalignment','center','fontsize',12);
        if plotx == 1
            text(-1,0,'DXM','horizontalalignment','center','fontsize',12);
            if sitex == 1
                text(-1,1.15,'A','horizontalalignment','center','fontsize',16);
            elseif sitex == 2
                text(-1,1.15,'B','horizontalalignment','center','fontsize',16);
            end   
        end
        if plotx == length(tTime)
            c = colorbar;
            tmpc = c.Position;
            c.Position = [tmpc(1)+0.06,tmpc(2)-0.04,tmpc(3),0.09];
            c.LineWidth = 1.5;
            c.Ticks = [-1;0;1];
            title(c,'\Delta\muV');
        end
        
        % MIDDLE PANEL PLOT (C2)
        posName = ['pos',num2str(ix(2,plotx))];
        pos.(posName) = [txpos(plotx),typos(2,sitex),twidth,theight];
        subplot('position',pos.(posName))
        plotStruc.avg = meanData.(site{sitex}).C2(:,tp);
        cfg = [];
        cfg.layout = 'easycapM11.mat';
        cfg.comment = 'no';
        cfg.interactive = 'no';
        cfg.zlim = [-1,1];
        cfg.markersymbol = '.';
        ft_topoplotER(cfg,plotStruc);
        if plotx == 1
            text(-1,0,'PBO','horizontalalignment','center','fontsize',12);
        end
        if plotx == length(tTime);
            c = colorbar;
            tmpc = c.Position;
            c.Position = [tmpc(1)+0.06,tmpc(2)-0.04,tmpc(3),0.09];
            c.LineWidth = 1.5;
            c.Ticks = [-1;0;1];
            title(c,'\Delta\muV');
        end
        
        % BOTTOM PANEL PLOT (STAT)
        
        % Load stat data
        statName = ['C1_',site{sitex},'_VS_C2_',site{sitex},'_TOI_',num2str(TOI.(site{sitex}){plotx}(1)),'_',num2str(TOI.(site{sitex}){plotx}(2)),'_N14.mat'];
        stat = load([pathIn,'STATS',filesep,statName]);
        
        posName = ['pos',num2str(ix(3,plotx))];
        pos.(posName) = [txpos(plotx),typos(3,sitex),twidth,theight];
        subplot('position',pos.(posName))
        
        cfg = [];
        cfg.layout = 'easycapM11.mat';
        cfg.comment = 'no';
        cfg.interactive = 'no';
        cfg.zlim = [-3,3];
        cfg.markersymbol = '.';
        
        stat = stat.stat;
        
        [~,tpStat] = min(abs(stat.time*1000-tTime(plotx)));
        plotStruc.avg = stat.stat(:,tpStat);
        
        if isfield(stat,'posclusters')
            if ~isempty(stat.posclusters)
                if stat.posclusters(1).prob < 0.01
                    cfg.highlight = 'on';
                    cfg.highlightchannel   =  stat.label(stat.posclusterslabelmat(:,tpStat)==1);
                    cfg.highlightsymbol    = '*';
                    cfg.highlightcolor   = [0 0 0];
                end
            end
        end
        if isfield(stat,'negclusters')
            if ~isempty(stat.negclusters)
                if stat.negclusters(1).prob < 0.01
                    
                    if isfield(cfg,'highlightchannel')
                        if ~isempty(cfg.highlightchannel)
                            cfg.highlight = {'on','on'};
                            cfg.highlightchannel   =  {cfg.highlightchannel,stat.label(stat.negclusterslabelmat(:,tpStat)==1)};
                            cfg.highlightsymbol    = {'*','*'};
                            cfg.highlightcolor   = {[0 0 0],[0.99 0.99 0.99]};
                        end
                    else
                        cfg.highlight = 'on';
                        cfg.highlightchannel   =  stat.label(stat.negclusterslabelmat(:,tpStat)==1);
                        cfg.highlightsymbol    = '*';
                        cfg.highlightcolor   = [ 0.99 0.99 0.99];
                    end
                end
            end
        end
        
        figStat = ft_topoplotER(cfg,plotStruc);
        colormap(gca,'hot');
        if plotx == 1
            text(-1,0,'Stat','horizontalalignment','center','fontsize',12);
        end
        if plotx == length(tTime)
            c = colorbar;
            tmpc = c.Position;
            c.Position = [tmpc(1)+0.06,tmpc(2)-0.04,tmpc(3),0.09];
            c.LineWidth = 1.5;
            c.Ticks = [-3;0;3];
            title(c,'t');
        end
    end
    
end

annotation('textbox', [0 0.89 1 0.1], ...
    'String', 'PFC stimulation', ...
    'EdgeColor', 'none', ...
    'HorizontalAlignment', 'center',...
    'FontSize',14)

annotation('textbox', [0 0.39 1 0.1], ...
    'String', 'PAR stimulation', ...
    'EdgeColor', 'none', ...
    'HorizontalAlignment', 'center',...
    'FontSize',14)

set(fig,'position', [200 300 1000 800]);

pathOut = '\figures\';
savename = [pathOut,'TEP_drug_comparison_',useData];
set(gcf,'PaperPositionMode','auto');
print(fig,'-dsvg',savename);
print(fig,'-dpng',savename);