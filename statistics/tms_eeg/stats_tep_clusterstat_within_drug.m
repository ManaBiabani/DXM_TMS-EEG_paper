%##### COMPARE CHANGES IN TEPS FOLLOWING DRUG #####

% This script compares changes in  TEPs over time following drug administration
% using cluster-based permutation statistics as implemented in FieldTrip. 
% Data are compared across a broad time window (15 to 250 ms). 
% Inputs are EEG data in grand average structures generated by FieldTrip.

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

%% SETTING FILE PATHS AND NAMES

% ===== SETTINGS ======

% Data set to use
dataSet = 'CLEAN_SOUND'; % 'CLEAN_ICA' | 'CLEAN_SOUND'
dataAv = 'N14';
dataZ = ''; % ''

% Remove individuals
remInd = []; % Leave empty if nothing to remove

% +++++ WITHIN DRUG COMPARISONS ++++++
% Time window of interest
TOI = {[0.015,0.25]}; % All time
% Comparisons of interest
comparisons = {{'C1','pfc','T0'},{'C1','pfc','T1'};...
    {'C2','pfc','T0'},{'C2','pfc','T1'};...
    {'C1','ppc','T0'},{'C1','ppc','T1'};...
    {'C2','ppc','T0'},{'C2','ppc','T1'}};

% ===== LOAD AND ORGANISE DATA ======

% Load FieldTrip
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

% Location of 'sound_final' file
pathIn = ['I:\nmda_tms_eeg\',dataSet,'\'];
pathOut = ['I:\nmda_tms_eeg\',dataSet,'\STATS\'];

% Load neighbour template
neighbour = load(['\final_code\statistics\tms_eeg\neighbour_template_nmda.mat']);

% Load GrandAverage file
load([pathIn,'grandAverage_',dataAv,dataZ,'.mat']);

% Generate required input matrices
if length(comparisons{1}) == 3
    for a = 1:size(comparisons,1) % loop over number of comparisons
        for b = 1:size(TOI,1) % loop over TOIs
            saveNameTemp{a,b} = [comparisons{a,1}{1,1},'_',comparisons{a,1}{1,2},'_',comparisons{a,1}{1,3},'_VS_',comparisons{a,2}{1,1},'_',comparisons{a,2}{1,2},'_',comparisons{a,2}{1,3},'_TOI_',num2str(TOI{b,1}(1,1)),'_',num2str(TOI{b,1}(1,2)),'_N',num2str(size(grandAverage.C1.pfc.T0.individual,1)-length(remInd)),dataZ];
            condition1Temp{a,b} = comparisons{a,1};
            condition2Temp{a,b} = comparisons{a,2};
            toiRangeTemp{a,b} = TOI{b};
        end
    end
else
    for a = 1:size(comparisons,1) % loop over number of comparisons
        for b = 1:size(TOI,1) % loop over TOIs
            saveNameTemp{a,b} = [comparisons{a,1}{1,1},'_',comparisons{a,1}{1,2},'_VS_',comparisons{a,2}{1,1},'_',comparisons{a,2}{1,2},'_TOI_',num2str(TOI{b,1}(1,1)),'_',num2str(TOI{b,1}(1,2)),'_N',num2str(size(grandAverage.C1.pfc.T0.individual,1)-length(remInd)),dataZ];
            condition1Temp{a,b} = comparisons{a,1};
            condition2Temp{a,b} = comparisons{a,2};
            toiRangeTemp{a,b} = TOI{b};
        end
    end
end

saveNameIn = reshape(saveNameTemp,1,[]);
condition1In = reshape(condition1Temp,1,[]);
condition2In = reshape(condition2Temp,1,[]);
toiIn = reshape(toiRangeTemp,1,[]);

%% RUN PARFOR LOOP FOR CLUSTERSTATS

statOut = cell(1,length(saveNameIn));
parfor x = 1:length(saveNameIn)
    statOut{x} = runClusterStat(grandAverage,pathOut,saveNameIn{x},condition1In{x},condition2In{x},toiIn{x},neighbour.neighbours,remInd);
    fprintf('%s is finished\n',saveNameIn{x});
end

%% RUN CLUSTERSTATS USING FIELDTRIP

function [stat] = runClusterStat(grandAverage,pathOut,saveName,condition1,condition2,TOI,neighbour,remInd)
    
    % Load data
    if length(condition1) == 3
        D1 = grandAverage.(condition1{1,1}).(condition1{1,2}).(condition1{1,3});
        D2 = grandAverage.(condition2{1,1}).(condition2{1,2}).(condition2{1,3});
    elseif length(condition1) == 2
        D1 = grandAverage.(condition1{1,1}).(condition1{1,2}).diff;
        D2 = grandAverage.(condition2{1,1}).(condition2{1,2}).diff;
    end
    
    % Remove individuals if requested
    if ~isempty(remInd)
        D1.individual(remInd,:,:) = [];
        D2.individual(remInd,:,:) = [];
    end

    cfg = [];
    cfg.channel     = {'all'};
    cfg.minnbchan        = 2; %minimum number of channels for cluster
    cfg.clusteralpha = 0.05;
    cfg.clusterstatistic = 'maxsum';
    cfg.alpha       = 0.05;
    cfg.latency     = TOI;
    cfg.avgovertime = 'no'; %can change this between no and yes depending if you want time included
    cfg.avgoverchan = 'no'; %can change this between no and yes depending if you want all channels included
    cfg.statistic   = 'depsamplesT';
    cfg.numrandomization = 5000;
    cfg.correctm    = 'cluster';
    cfg.method      = 'montecarlo'; 
    cfg.tail             = 0; % Two-tailed
    cfg.correcttail = 'prob'; % Correct probability values for two-tailed test
    cfg.clustertail      = 0; % Two-tailed
    cfg.neighbours  = neighbour;
    cfg.parameter   = 'individual';

    subj = size(D1.individual,1); %enter number of participants

    %design for within subject test
    design = zeros(2,2*subj);
    for i = 1:subj
      design(1,i) = i;
    end
    for i = 1:subj
      design(1,subj+i) = i;
    end
    design(2,1:subj)        = 1;
    design(2,subj+1:2*subj) = 2;

    cfg.design = design;
    cfg.uvar  = 1;
    cfg.ivar  = 2;

    %define variables for comparison. 
    [stat] = ft_timelockstatistics(cfg, D1, D2);

    save ([pathOut,saveName,'.mat'],'stat');
    
end