%##### COMPARE CHANGES IN RESTING OSCILLATIONS #####

% This script compares changes in resting oscillations (eyes open or closed)
% using cluster-based permutation statistics as implemented in FieldTrip. 
% Data are compared across in defined frequency bands. The user can choose the 
% interaction of interest to test (compare baseline between conditions,
% compare across time within conditions, or compare differences across time
% between conditions [drug x time interaction]). These options can be
% toggled by uncommenting the comparison of interest below. 
% Inputs are EEG data in grand average structures generated by FieldTrip.
% Note that the script rest_fft_conditions_diff.mat needs to be run before
% running this script.

% Author: Nigel Rogasch, Monash University

clear; close all; clc;

%% SETTING FILE PATHS AND NAMES

% Load FieldTrip
addpath ('C:\Users\Nigel\Desktop\fieldtrip-20170815');
ft_defaults;

% Set paths
pathIn = 'I:\nmda_tms_eeg\REST_FFT_STATS\data\'; % Path in
pathOut = 'I:\nmda_tms_eeg\REST_FFT_STATS\stats\'; % Path out

% Load neighbour template
neighbour = load(['\final_code\statistics\tms_eeg\neighbour_template_nmda.mat']);

% Define frequencies of interest
freqName = {'delta';'theta';'alpha';'beta';'gamma'};
freqRange = {[1,3];[4,7];[8,12];[13,29];[30,45]};

% Comparisons of interest

% Compare changes within a session
% comparisons = {'C1_open_t0','C1_open_t1';...
%     'C1_closed_t0','C1_closed_t1';...
%     'C2_open_t0','C2_open_t1';...
%     'C2_closed_t0','C2_closed_t1'};

% Compare between baselines
comparisons = {'C1_open_t0','C2_open_t0';...
    'C1_closed_t0','C2_closed_t0';...
    'C1_open_t1','C2_open_t1';...
    'C1_closed_t1','C2_closed_t1'};

% Compare changes between conditions (drug x time interaction)
% comparisons = {'C1_open_diff','C2_open_diff';...
%     'C1_closed_diff','C2_closed_diff'};

% Generate required input matrices
for a = 1:size(comparisons,1) % loop over number of comparisons
    for b = 1:length(freqName) % loop over frequencies
        saveNameTemp{a,b} = [comparisons{a,1},'_VS_',comparisons{a,2},'_',freqName{b,1}];
        condition1Temp{a,b} = comparisons{a,1};
        condition2Temp{a,b} = comparisons{a,2};
        freqRangeTemp{a,b} = freqRange{b};
    end
end

saveNameIn = reshape(saveNameTemp,1,[]);
condition1In = reshape(condition1Temp,1,[]);
condition2In = reshape(condition2Temp,1,[]);
freqRangeIn = reshape(freqRangeTemp,1,[]);

%% RUN PARFOR LOOP FOR CLUSTERSTATS

statOut = cell(1,length(saveNameIn));
parfor x = 1:length(saveNameIn)
    statOut{x} = runClusterStat(pathIn,pathOut,saveNameIn{x},condition1In{x},condition2In{x},freqRangeIn{x},neighbour.neighbours);
    fprintf('%s is finished\n',saveNameIn{x});
end

%% RUN CLUSTERSTATS USING FIELDTRIP

function [stat] = runClusterStat(pathIn,pathOut,saveName,condition1,condition2,freqRange,neighbour)
    
    %Load data
    D1 = load([pathIn,condition1,'.mat']);
    D2 = load([pathIn,condition2,'.mat']);

    cfg = [];
    cfg.channel     = {'all'};
    cfg.minnbchan        = 2; %minimum number of channels for cluster
    cfg.clusteralpha = 0.05;
    cfg.clusterstatistic = 'maxsum';
    cfg.alpha       = 0.025;% 0.025 for two tailed, 0.05 for one tailed
    cfg.latency     = 'all';
    cfg.frequency   = freqRange;
%     cfg.avgovertime = 'yes'; %can change this between no and yes depending if you want time included
    cfg.avgoverchan = 'no'; %can change this between no and yes depending if you want all channels included
    cfg.avgoverfreq = 'yes'; %can change this between no and yes depending if you want all frequencies included
    cfg.statistic   = 'depsamplesT';
    cfg.numrandomization = 5000;
    cfg.correctm    = 'cluster';
    cfg.method      = 'montecarlo'; 
    cfg.tail             = 0;
    cfg.clustertail      = 0;
    cfg.neighbours  = neighbour;
    %cfg.parameter   = 'individual';

    subj = size(D1.power.powspctrm,1); %enter number of participants

    %design for within subject test
    design = zeros(2,2*subj);
    for i = 1:subj
      design(1,i) = i;
    end
    for i = 1:subj
      design(1,subj+i) = i;
    end
    design(2,1:subj)        = 1;
    design(2,subj+1:2*subj) = 2;

    cfg.design = design;
    cfg.uvar  = 1;
    cfg.ivar  = 2;

    %define variables for comparison.
    if contains(condition1,'diff')
        [stat] = ft_freqstatistics(cfg, D1.power, D2.power);
    else
        [stat] = ft_freqstatistics(cfg, D2.power, D1.power);
    end

    save ([pathOut,saveName,'.mat'],'stat');
    
end
